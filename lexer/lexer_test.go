package lexer

import (
	"fmt"
	"testing"
	"toy_lang/token"
)

func compareTokens(t *testing.T, got, want []token.Token, tt lTest) {
	var Reset = "\033[0m"
	var Red = "\033[31m"
	var Green = "\033[32m"
	var Blue = "\033[34m"
	var Yellow = "\033[33m"
	var stderr = ""
	if len(got) != len(want) {
		stderr += fmt.Sprintf("Length mismatch: got %d, want %d\n", len(got), len(want))
	}

	minLen := len(got)
	if len(want) < minLen {
		minLen = len(want)
	}

	for i := 0; i < minLen; i++ {
		if got[i] != want[i] {
			stderr += fmt.Sprintf("Mismatch at index %d: got %+v, want %+v\n", i, got[i], want[i])
		}
	}

	if len(got) > len(want) {
		for i := len(want); i < len(got); i++ {
			stderr += fmt.Sprintf("Extra element in got at index %d: %+v\n", i, got[i])
		}
	} else if len(want) > len(got) {
		for i := len(got); i < len(want); i++ {
			stderr += fmt.Sprintf("Missing element in got at index %d: %+v\n", i, want[i])
		}
	}
	if stderr != "" {
		errorString := Red + fmt.Sprintf("[FAILURE] Test number %d has failed", tt.id) + Reset + "\n____________\n" + tt.input + "\n____________\n" + "ERROR\n" + stderr + "\n\n\n" + Blue + fmt.Sprintf("Full output\n %+v\n\n\n%v Correct output\n%+v", got, Yellow, want) + Reset
		t.Error(errorString)
	} else {
		fmt.Printf("%v[PASS] Test number %d has passed%v\n", Green, tt.id, Reset)
	}
}

type lTest struct {
	input  string
	output []token.Token
	id     int
}

func TestLexer(t *testing.T) {
	lex := NewLexer()
	tests := []lTest{
		{
			input: "let x = 4;",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "4"),
				*token.NewToken(token.SEMICOLON, ";"),
			},
			id: 1,
		},
		{
			input: "let x = 7; let y = 9 + x; x++;",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "7"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "y"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "9"),
				*token.NewToken(token.PLUS, "+"),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.PLUS_PLUS, "++"),
				*token.NewToken(token.SEMICOLON, ";"),
			},
			id: 2,
		},
		{
			input: "let x = 3; x+=1; x-=3; x*=4; x/=6; x--;",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "3"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.COMPOUND_PLUS, "+="),
				*token.NewToken(token.INTEGER, "1"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.COMPOUND_MINUS, "-="),
				*token.NewToken(token.INTEGER, "3"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.COMPOUND_MULTIPLY, "*="),
				*token.NewToken(token.INTEGER, "4"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.COMPOUND_DIVIDE, "/="),
				*token.NewToken(token.INTEGER, "6"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.MINUS_MINUS, "--"),
				*token.NewToken(token.SEMICOLON, ";"),
			},
			id: 3,
		},
		{
			input: "let b = true; let y = false;",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "b"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.BOOLEAN, "true"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "y"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.BOOLEAN, "false"),
				*token.NewToken(token.SEMICOLON, ";"),
			},
			id: 4,
		},
		{
			input: "let b = 5 < 6; let a = b && true;",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "b"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "5"),
				*token.NewToken(token.LESS_THAN, "<"),
				*token.NewToken(token.INTEGER, "6"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "a"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.VAR_REF, "b"),
				*token.NewToken(token.AND, "&&"),
				*token.NewToken(token.BOOLEAN, "true"),
				*token.NewToken(token.SEMICOLON, ";"),
			},
			id: 5,
		},
		{
			input: "let b = true || false; let c = !b;",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "b"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.BOOLEAN, "true"),
				*token.NewToken(token.OR, "||"),
				*token.NewToken(token.BOOLEAN, "false"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "c"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.NOT, "!"),
				*token.NewToken(token.VAR_REF, "b"),
				*token.NewToken(token.SEMICOLON, ";"),
			},
			id: 6,
		},
		{
			input: "let x = 4 >= 5; let y = 5 <= 9;",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "4"),
				*token.NewToken(token.GREATER_THAN_EQT, ">="),
				*token.NewToken(token.INTEGER, "5"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "y"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "5"),
				*token.NewToken(token.LESS_THAN_EQT, "<="),
				*token.NewToken(token.INTEGER, "9"),
				*token.NewToken(token.SEMICOLON, ";"),
			},
			id: 7,
		},
		{
			input: "if 3==4{let x = 5;}",
			output: []token.Token{
				*token.NewToken(token.IF, "if"),
				*token.NewToken(token.INTEGER, "3"),
				*token.NewToken(token.EQUALS, "=="),
				*token.NewToken(token.INTEGER, "4"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "5"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
			},
			id: 8,
		},
		{
			input: "let x = 9; if x < 5{let y = 4;}",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "9"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.IF, "if"),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.LESS_THAN, "<"),
				*token.NewToken(token.INTEGER, "5"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "y"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "4"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
			},
			id: 9,
		},
		{
			input: "let y = true || false; if y{let x = 5;}",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "y"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.BOOLEAN, "true"),
				*token.NewToken(token.OR, "||"),
				*token.NewToken(token.BOOLEAN, "false"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.IF, "if"),
				*token.NewToken(token.VAR_REF, "y"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "5"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
			},
			id: 10,
		},
		{
			input: "let x = true && !false; if x{if false{let y = 4;}}",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.BOOLEAN, "true"),
				*token.NewToken(token.AND, "&&"),
				*token.NewToken(token.NOT, "!"),
				*token.NewToken(token.BOOLEAN, "false"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.IF, "if"),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.IF, "if"),
				*token.NewToken(token.BOOLEAN, "false"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "y"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "4"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
				*token.NewToken(token.RBRACE, "}"),
			},
			id: 11,
		},
		{
			input: "let x = false; if !x&&true{let y = !x;}",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.BOOLEAN, "false"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.IF, "if"),
				*token.NewToken(token.NOT, "!"),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.AND, "&&"),
				*token.NewToken(token.BOOLEAN, "true"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "y"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.NOT, "!"),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
			},
			id: 12,
		},
		{
			input: "let x= 5; if x <=6{let y = 9;}else{let z = 5;}",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "5"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.IF, "if"),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.LESS_THAN_EQT, "<="),
				*token.NewToken(token.INTEGER, "6"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "y"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "9"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
				*token.NewToken(token.ELSE, "else"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "z"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "5"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
			},
			id: 13,
		},
		{
			input: "if false{let y = 9;}else{let z = 3;}",
			output: []token.Token{
				*token.NewToken(token.IF, "if"),
				*token.NewToken(token.BOOLEAN, "false"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "y"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "9"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
				*token.NewToken(token.ELSE, "else"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "z"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "3"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
			},
			id: 14,
		},
		{
			input: "let x = 0; if true {let y = 4; x = y;} else {let y = 5; x = y;}",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "0"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.IF, "if"),
				*token.NewToken(token.BOOLEAN, "true"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "y"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "4"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.VAR_REF, "y"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
				*token.NewToken(token.ELSE, "else"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "y"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "5"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.VAR_REF, "y"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
			},
			id: 15,
		},
		{
			input: "let x = 4*(8+3); if !(x < 10){let y = 5;}",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "4"),
				*token.NewToken(token.MULTIPLY, "*"),
				*token.NewToken(token.LPAREN, "("),
				*token.NewToken(token.INTEGER, "8"),
				*token.NewToken(token.PLUS, "+"),
				*token.NewToken(token.INTEGER, "3"),
				*token.NewToken(token.RPAREN, ")"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.IF, "if"),
				*token.NewToken(token.NOT, "!"),
				*token.NewToken(token.LPAREN, "("),
				*token.NewToken(token.VAR_REF, "x"),
				*token.NewToken(token.LESS_THAN, "<"),
				*token.NewToken(token.INTEGER, "10"),
				*token.NewToken(token.RPAREN, ")"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "y"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "5"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
			},
			id: 16,
		},
		{
			input: "if true{if !false{let y = 5;}}",
			output: []token.Token{
				*token.NewToken(token.IF, "if"),
				*token.NewToken(token.BOOLEAN, "true"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.IF, "if"),
				*token.NewToken(token.NOT, "!"),
				*token.NewToken(token.BOOLEAN, "false"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "y"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.INTEGER, "5"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
				*token.NewToken(token.RBRACE, "}"),
			},
			id: 17,
		},
		{
			input: "let x = -3;",
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.MINUS, "-"),
				*token.NewToken(token.INTEGER, "3"),
				*token.NewToken(token.SEMICOLON, ";"),
			},
			id: 18,
		},
		{
			input: "fn a(b){let a = b + 2; return a;}",
			output: []token.Token{
				*token.NewToken(token.FN, "fn"),
				*token.NewToken(token.FUNC_NAME, "a"),
				*token.NewToken(token.LPAREN, "("),
				*token.NewToken(token.VAR_REF, "b"),
				*token.NewToken(token.RPAREN, ")"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "a"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.VAR_REF, "b"),
				*token.NewToken(token.PLUS, "+"),
				*token.NewToken(token.INTEGER, "2"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RETURN, "return"),
				*token.NewToken(token.VAR_REF, "a"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
			},
			id: 19,
		},
		{
			input: "fn add(a, b){return a + b;}",
			output: []token.Token{
				*token.NewToken(token.FN, "fn"),
				*token.NewToken(token.FUNC_NAME, "add"),
				*token.NewToken(token.LPAREN, "("),
				*token.NewToken(token.VAR_REF, "a"),
				*token.NewToken(token.COMMA, ","),
				*token.NewToken(token.VAR_REF, "b"),
				*token.NewToken(token.RPAREN, ")"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.RETURN, "return"),
				*token.NewToken(token.VAR_REF, "a"),
				*token.NewToken(token.PLUS, "+"),
				*token.NewToken(token.VAR_REF, "b"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
			},
			id: 20,
		},
		{
			input: "fn a(){return 1;} let b = a();",
			output: []token.Token{
				*token.NewToken(token.FN, "fn"),
				*token.NewToken(token.FUNC_NAME, "a"),
				*token.NewToken(token.LPAREN, "("),
				*token.NewToken(token.RPAREN, ")"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.RETURN, "return"),
				*token.NewToken(token.INTEGER, "1"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "b"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.VAR_REF, "a"),
				*token.NewToken(token.LPAREN, "("),
				*token.NewToken(token.RPAREN, ")"),
				*token.NewToken(token.SEMICOLON, ";"),
			},
			id: 21,
		},
		{
			input: "fn a(b){return b - 2;} fn c(b){return b + 2;} let d = a(2) + c(2);",
			output: []token.Token{
				*token.NewToken(token.FN, "fn"),
				*token.NewToken(token.FUNC_NAME, "a"),
				*token.NewToken(token.LPAREN, "("),
				*token.NewToken(token.VAR_REF, "b"),
				*token.NewToken(token.RPAREN, ")"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.RETURN, "return"),
				*token.NewToken(token.VAR_REF, "b"),
				*token.NewToken(token.MINUS, "-"),
				*token.NewToken(token.INTEGER, "2"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
				*token.NewToken(token.FN, "fn"),
				*token.NewToken(token.FUNC_NAME, "c"),
				*token.NewToken(token.LPAREN, "("),
				*token.NewToken(token.VAR_REF, "b"),
				*token.NewToken(token.RPAREN, ")"),
				*token.NewToken(token.LBRACE, "{"),
				*token.NewToken(token.RETURN, "return"),
				*token.NewToken(token.VAR_REF, "b"),
				*token.NewToken(token.PLUS, "+"),
				*token.NewToken(token.INTEGER, "2"),
				*token.NewToken(token.SEMICOLON, ";"),
				*token.NewToken(token.RBRACE, "}"),
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "d"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.VAR_REF, "a"),
				*token.NewToken(token.LPAREN, "("),
				*token.NewToken(token.INTEGER, "2"),
				*token.NewToken(token.RPAREN, ")"),
				*token.NewToken(token.PLUS, "+"),
				*token.NewToken(token.VAR_REF, "c"),
				*token.NewToken(token.LPAREN, "("),
				*token.NewToken(token.INTEGER, "2"),
				*token.NewToken(token.RPAREN, ")"),
				*token.NewToken(token.SEMICOLON, ";"),
			},
			id: 22,
		},
		{
			input: `let x = "hi";`,
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.STRING, `hi`),
				*token.NewToken(token.SEMICOLON, ";"),
			},
			id: 23,
		},
		{
			input: `let x = "hello " + "world";`,
			output: []token.Token{
				*token.NewToken(token.LET, "let"),
				*token.NewToken(token.VAR_NAME, "x"),
				*token.NewToken(token.ASSIGN, "="),
				*token.NewToken(token.STRING, "hello "),
				*token.NewToken(token.PLUS, "+"),
				*token.NewToken(token.STRING, "world"),
				*token.NewToken(token.SEMICOLON, ";"),
			},
			id: 24,
		},
	}
	for _, tt := range tests {
		res := lex.Lex(tt.input)
		compareTokens(t, res, tt.output, tt)
	}
}
